            bool isValid = true;
            std::unordered_map<std::string, int> variableCoefficients;
            if (simplifiedTree->left->token.type == VARIABLE) {
                variableCoefficients[simplifiedTree->left->token.value] = 1;
            } else if (simplifiedTree->left->token.type == OPERATOR && 
                      ((simplifiedTree->left->token.value == "*" && 
                       ((simplifiedTree->left->left->token.type == VARIABLE && simplifiedTree->left->right->token.type == NUMBER) || 
                       (simplifiedTree->left->left->token.type == NUMBER && simplifiedTree->left->right->token.type == VARIABLE)))
                      ||
                      (simplifiedTree->left->token.value == "/" && 
                       (simplifiedTree->left->left->token.type == VARIABLE && simplifiedTree->left->right->token.type == NUMBER)) )) {
                int isPositive = simplifiedTree->left->token.value == "*" ? 1 : -1;
                if (simplifiedTree->left->left->token.type == VARIABLE) {
                    variableCoefficients[simplifiedTree->left->left->token.value] = isPositive * std::stoi(simplifiedTree->left->right->token.value);
                } else {
                    variableCoefficients[simplifiedTree->left->right->token.value] = isPositive * std::stoi(simplifiedTree->left->left->token.value);
                }
            } else if (simplifiedTree->left->token.type == FUNCTION && simplifiedTree->left->token.value == "pow" && simplifiedTree->left->left->token.type == VARIABLE) {
                variableCoefficients[simplifiedTree->left->left->token.value] = std::stoi(simplifiedTree->left->right->token.value);
            } else {
                isValid = false;
            }
            if (simplifiedTree->right->token.type == VARIABLE) {
                variableCoefficients[simplifiedTree->right->token.value] = getVariableCoefficient(variableCoefficients, simplifiedTree->right->token.value) + 1;
            } else if (simplifiedTree->right->token.type == OPERATOR && 
                      ((simplifiedTree->right->token.value == "*" && 
                       ((simplifiedTree->right->left->token.type == VARIABLE && simplifiedTree->right->right->token.type == NUMBER) || 
                       (simplifiedTree->right->left->token.type == NUMBER && simplifiedTree->right->right->token.type == VARIABLE)))
                      ||
                      (simplifiedTree->right->token.value == "/" && 
                       (simplifiedTree->right->left->token.type == VARIABLE && simplifiedTree->right->right->token.type == NUMBER)) )) {
                if (simplifiedTree->right->left->token.type == VARIABLE) {
                    int isPositive = simplifiedTree->right->token.value == "*" ? 1 : -1;
                    variableCoefficients[simplifiedTree->right->left->token.value] = getVariableCoefficient(variableCoefficients, simplifiedTree->right->left->token.value) + isPositive * std::stoi(simplifiedTree->right->right->token.value);
                } else {
                    variableCoefficients[simplifiedTree->right->right->token.value] = getVariableCoefficient(variableCoefficients, simplifiedTree->right->right->token.value) + isPositive * std::stoi(simplifiedTree->right->left->token.value);
                }
            } else if (simplifiedTree->right->token.type == FUNCTION && simplifiedTree->right->token.value == "pow" && simplifiedTree->right->left->token.type == VARIABLE) {
                variableCoefficients[simplifiedTree->right->left->token.value] = getVariableCoefficient(variableCoefficients, simplifiedTree->right->left->token.value) + std::stoi(simplifiedTree->right->right->token.value);
            } else {
                isValid = false;
            }

int getVariableCoefficient(unordered_map<string, int> variableCoefficients, string variable) {
    if (variableCoefficients.find(variable) == variableCoefficients.end()) return 0;
    return variableCoefficients.at(variable);
}

        // Step 4: generate diff
        // cout << endl << "Derivative w.r.t. " << variable << ": " << differentiate(root, variable) << endl;




// std::string differentiate(TreeNode* root, const std::string& variable) {
//     if (root == nullptr) return "";
//     switch (root->token.type) {
//         case NUMBER:
//             return "0";  // Derivative of a constant is 0.
//         case VARIABLE:
//             return root->token.value == variable ? "1" : "0";  // d/dx[x] = 1, d/dx[y] (x â‰  y) = 0.
//         case FUNCTION: {
//             // Apply chain rule: g'(f(x))f'(x), where g is the outer function and f is the inner function.
//             std::string leftExpression = treeToExpression(root->left);  // f(x)
//             std::string rightExpression = treeToExpression(root->right);
//             std::string innerDerivative = differentiate(root->left, variable);  // f'(x)
//             if (root->token.value == "sin")  // (sin(f(x)))' = cos(f(x))*f'(x)
//                 return "cos(" + leftExpression + ")*(" + innerDerivative + ")";
//             else if (root->token.value == "cos")  // (cos(f(x)))' = -sin(f(x))*f'(x)
//                 return "(-sin(" + leftExpression + ")*(" + innerDerivative + "))";
//             else if (root->token.value == "tan")  // (tan(f(x)))' = f(x)/(cos^2(x))*f'(x)
//                 return "(" + leftExpression + ")/(cos^2(" + leftExpression + "))*(" + innerDerivative + ")";
//             else if (root->token.value == "ln")  // (ln(f(x)))' = f'(x)/f(x)
//                 return "(" + innerDerivative + ")/(" + leftExpression + ")";
//             else if (root->token.value == "exp")  // (exp(f(x)))' = exp(f(x))*f'(x)
//                 return "exp(" + leftExpression + ")*(" + innerDerivative + ")";
//             else if (root->token.value == "log")  // (log(f(x)))' = f'(x)/(f(x)*ln(10))
//                 return "(" + innerDerivative + ")/(" + rightExpression + "*ln(" + leftExpression + "))";
//             else if (root->token.value == "pow") {
//                 if (root->right->token.type == NUMBER) {
//                     // innerDerivative = differentiate(root->left, variable);  // baseDerivative
//                     // (x^a)' = a*x^(a-1)
//                     return rightExpression + "*(" + leftExpression + ")^(" + std::to_string(std::stoi(rightExpression) - 1) + ")*(" + innerDerivative + ")";
//                 } else if (root->left->token.type == NUMBER) {
//                     innerDerivative = differentiate(root->right, variable);  // exponentDerivative
//                     // (a^x)' = a^x*ln(a)
//                     return leftExpression + "^(" + rightExpression + ")*ln(" + leftExpression + ")*(" + innerDerivative + ")";
//                 } else {
//                     // (f(x)^g(x))' = f(x)^g(x)*(g(x)*f'(x)/f(x) + g'(x)*ln(f(x))
//                     std::string baseDerivative = differentiate(root->left, variable);  // f'(x)
//                     std::string exponentDerivative = differentiate(root->right, variable);  // g'(x)
//                     return leftExpression + "^" + rightExpression + "*(" + rightExpression + "*(" + baseDerivative + ")/(" + leftExpression + ") + (" + exponentDerivative + ")*ln(" + leftExpression + "))";
//                 }
//             }
//             break;
//         }
//         case OPERATOR: {
//             std::string leftExpression = treeToExpression(root->left);  // f(x)
//             std::string rightExpression = treeToExpression(root->right);  // g(x)
//             std::string leftDerivative = differentiate(root->left, variable);  // f'(x)
//             std::string rightDerivative = root->right ? differentiate(root->right, variable) : "";  // g'(x)
//             if (root->token.value == "+")  // (f+g)' = f'+g'
//                 return "(" + leftDerivative + ")+(" + rightDerivative + ")";
//             else if (root->token.value == "-")  // (f-g)' = f'-g'
//                 return "(" + leftDerivative + ")-(" + rightDerivative + ")";
//             else if (root->token.value == "*")  // (f*g)' = f'*g + f*g'
//                 return "(" + leftDerivative + ")*(" + rightExpression + ")+(" + leftExpression + ")*(" + rightDerivative + ")";
//             else if (root->token.value == "/")  // (f/g)' = (f'*g - f*g')/g^2
//                 return "((" + leftDerivative + ")*(" + rightExpression + ")-(" + leftExpression + ")*(" + rightDerivative + "))/(" + rightExpression + ")^2";
//             break;
//         }
//         default:
//             break;
//     }
//     return "";  // Placeholder for unknown types.
// }
